
/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);
    Or(a=instruction[5], b=Ainstruction, out=loadA);
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=a); //first mux
    //if the Not value is 1, then the instruction was an A-instruction
    ARegister(in=a, load=loadA, out=avalue, out[0..14]=addressM);

    Mux16(a=avalue, b=inM, sel=instruction[12], out=muxout); //2nd mux

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluout, load=loadD, out=dvalue); //d reg

    ALU(x=dvalue, y=muxout, zx=instruction[11], nx=instruction[10],
	zy=instruction[9], ny=instruction[8], f=instruction[7], 
	no=instruction[6], out=aluout, out=outM, zr=zero, ng=neg); //alu

    And(a=instruction[15], b=instruction[3], out=writeM);

    // figure out the jump values and set the PC      
    Nand(a=zero, b=neg, out=temp);
    And(a=temp, b=instruction[0], out=o1);
    And(a=zero, b=instruction[1], out=o2);
    And(a=neg, b=instruction[2], out=o3);
    Or(a=o1, b=o2, out=t1);
    Or(a=t1, b=o3, out=jump);
    And(a=jump, b=instruction[15], out=jumpsure);
    PC(in=avalue, load=jumpsure, inc=true, reset=reset, out[0..14]=pc); 
}
